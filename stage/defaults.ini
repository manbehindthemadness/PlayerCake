[settings]
display = 'localhost:11.0'
Debug = True
; Enables debugging
Debug_Pretty = False
; Pprint the debug info instead of print. - Disables Debug_filter.
Debug_To_Screen = True
; Report debugging data to the on-board screen.
debug_screen_mode = gyro
; what we will show on the debug screen.
Debug_Update_Only = True
; Only update the debug model with new data and ignotr empty ones - Useful for catching fast operations.
Debug_Threads = False
; This will cause thread loop info to be returned.
debug_imu = False
; This sends the raw imu data to console.
Screen_template = 'improv'
; Eventually this will allow us to change what the screen is showing.
Debug_Filter = [
    'GPS',
    'IMU'
    ]
; This lists the includes from the real time data model that will be returned to console.
Command_exceptions = [

    ]
; Use this to enable otherwise restricted commands **USE WITH CAUTION**.
Name = 'TestBot01'
Role = 'stage'
; This is the role announcement that is used by the network client UDP lookup broadcast.
Target = 'director'
; This is the up-stream role used to direct rebort connections.
Director_ID = '6efc1846-d015-11ea-87d0-0242ac130003'
; This ID matches Stage clients to their respective Directors.
Stage_ID = 'a9b3cfb3-c72d-4efd-993d-6c8dccbb8609'
; This alows us to be identified from other stages.
Environment = 'pure'
; Mixed means that we are using windows or apple to communicate with Stage: mixed/pure
BindAdaptor = 'wlan0'
; This is the network adaptor used to handle incoming and outgoing network traffic.
TCPBindPort = 12000
; TCP listener port.
UDPBindPort = 37020
; UDP Listener Port.
UDPBroadcastPort = 37020
; Port to broadcast on.
bindaddr = '0.0.0.0'
; this is our bind ip.
NetworkTimeout = 10
; This is the connection timeout for the network sockets.
SSID = ''
; These are placeholder values for when we get QR code recognition working.
Secret = ''

keys = {}
; Encryption keys (for future use)

; I2C Addresses.

ADC_I2C = (0x68, 0x69, 18)
; Analog inputs.
PWM_i2c = 0x40
; Hardware PWM (Servos)
Accel = 0x6a
; Accelerometer.
Mag = 0x1c
; Compass.
Press = 0x77
; Altimeter/Pressure.
UART = (0x48, 0x90)
; I2C Serial expander (LVMaxSonar, spare).
GPS_UART = '/dev/serial0'
; GPS.
Sonar_UART = '/dev/serial2'
; Digital sonar.
Extra_UART = '/dev/serial3'
; Save for later.

; Pin assignments.

Cooling_Fan = 12
; Optional.
Laser = 16
; Optional.
NV_Flood = 26
; Optional.
Gps_Sync = 13
Gps_Enable = 6
PWM_Enable = 5

; HS-SR04 sonar (Trigger, Echo).
L_Echo = (23, 25)
; Left.
R_Echo = (27, 22)
; Right.
B_Echo = (5, 6)
; Back, NOTE: we will have to relocate this to GPIO 5/6 as it's on the SPI1 chip selects.

; leg configurations.
; pwm port, adc port, minimum position, nautral position, maximum position, backlash.
legs = {
    'LEG1': {
       'x': {'pwm': 0, 'adc': 15, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'y': {'pwm': 1, 'adc': 14, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'z': {'pwm': 2, 'adc': 13, 'min': 0, 'nu': 150, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'foot': {'adc': 12},
       'len': 160,
       'trv': 36,
       },
    'LEG2': {
       'x': {'pwm': 4, 'adc': 12, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'y': {'pwm': 5, 'adc': 11, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'z': {'pwm': 6, 'adc': 10, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'foot': {'adc': 9},
       'len': 160,
       'trv': 36,
       },
    'LEG3': {
       'x': {'pwm': 12, 'adc': 3, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'y': {'pwm': 13, 'adc': 2, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'z': {'pwm': 14, 'adc': 1, 'min': 0, 'nu': 150, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'foot': {'adc': 0},
       'len': 160,
       'trv': 36,
       },
    'LEG4': {
       'x': {'pwm': 8, 'adc': 7, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'y': {'pwm': 9, 'adc': 6, 'min': 0, 'nu': 90, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'z': {'pwm': 10, 'adc': 5, 'min': 0, 'nu': 150, 'max': 180, 'bl': 0, 'ac': 0.1, 'ms': 100},
       'foot': {'adc': 4},
       'len': 160,
       'trv': 36,
       },
    }
; PWM settings.
pwm = {
    'clock': 25000000,
    'freq': 50,
    'range': 180,
    'pmin': 750,
    'pmax': 2250,
    '0': False,
    '1': False,
    '2': False,
    '3': False,
    '4': False,
    '5': False,
    '6': False,
    '7': False,
    '8': False,
    '9': False,
    '10': False,
    '11': False,
    '12': False,
    '13': False,
    '14': False,
    '15': False,
    }

; This math will be evaled in the event  we have two servos that need to move in unison (knee and hip for Z lift for example).
X_Solver = ''
Y_SOlver = ''
Z_Solver = ''

; Filters:
filtered_adc_ports = []
adc_filter_depth = 3
; The fades here are used to smooth out noise.
GPS_Fade = 20
; This is the number of samples that we will use to smooth the gps results.
Accel_Fade = 20
; Fade for accelerometer.
Gyro_Fade = 20
; Fade for gyro.
Mag_Fade = 20
; Fade for magnitometer.

; Timings:

Debug_Cycle = 0.1
; Number in seconds to update the debug logs.
NetScan_Cycle = 10
; Number in seconds between updating the list of wireless networks.
System_Cycle = 5
; Time in seconds for updating system information.
adc_cycle = 0.01
; ADC read delay.
gps_cycle = 1
;gps read delay.
sonar_cycle = 0.3
;sonar read delay
dof_cycle = 0.05
;9dof real time cycle.
pwm_cycle = 0.02
;pwm update cycle.

; Calibrations

dof_calibrations =
; calibrations for the 9dof sensor.
dof_remap = (0x21, 0x04)
; x, y, z, mirx, miry, mirz, default: (0, 1, 2, 0, 0, 0)
dof_offsets = {
        'MAG_OFFSET_X_LSB_ADDR': 0x00,
        'MAG_OFFSET_X_MSB_ADDR': 0x00,
        'MAG_OFFSET_Y_LSB_ADDR': 0x00,
        'MAG_OFFSET_Y_MSB_ADDR': 0x00,
        'MAG_OFFSET_Z_LSB_ADDR': 0x00,
        'MAG_OFFSET_Z_MSB_ADDR': 0x00,
        'ACCEL_OFFSET_X_LSB_ADDR': 0x00,
        'ACCEL_OFFSET_X_MSB_ADDR': 0x00,
        'ACCEL_OFFSET_Y_LSB_ADDR': 0x00,
        'ACCEL_OFFSET_Y_MSB_ADDR': 0x00,
        'ACCEL_OFFSET_Z_LSB_ADDR': 0x00,
        'ACCEL_OFFSET_Z_MSB_ADDR': 0x00,
        'GYRO_OFFSET_X_LSB_ADDR': 0x00,
        'GYRO_OFFSET_X_MSB_ADDR': 0x00,
        'GYRO_OFFSET_Y_LSB_ADDR': 0x00,
        'GYRO_OFFSET_Y_MSB_ADDR': 0x00,
        'GYRO_OFFSET_Z_LSB_ADDR': 0x00,
        'GYRO_OFFSET_Z_MSB_ADDR': 0x00,
    }
ADC_Num_Channels = 16
; Number of ADC channels.
ADC_Noise = 0.0
; 0.002471  ; We can use this in the event that the acd chan is not balanced to ground.
ADC_Ungrounded_Channels = []

; If the IMU is upside down (Skull logo facing up), change this value to 1
IMU_UPSIDE_DOWN = 0
RAD_TO_DEG = 57.29578
M_PI = 3.14159265358979323846
G_GAIN = 0.070
; [deg/s/LSB]  If you change the dps for gyro, you need to update this value accordingly
AA = 0.40
; Complementary filter constant

; Kalman filter variables
Q_angle = 0.02
Q_gyro = 0.0015
R_angle = 0.005
y_bias = 0.0
x_bias = 0.0
XP_00 = 0.0
XP_01 = 0.0
XP_10 = 0.0
XP_11 = 0.0
YP_00 = 0.0
YP_01 = 0.0
YP_10 = 0.0
YP_11 = 0.0
KFangleX = 0.0
KFangleY = 0.0

gyroXangle = 0.0
gyroYangle = 0.0
gyroZangle = 0.0
CFangleX = 0.0
CFangleY = 0.0
kalmanX = 0.0
kalmanY = 0.0

IMU_rt_values = []
; Extra variables to be fetched from the IMU may be listed here.

; ;;;;;;;;;;;;;;;; Compass Calibration values ;;;;;;;;;;;;
; Use calibrateBerryIMU.py to get calibration values
; Calibrating the compass isnt mandatory, however a calibrated
; compass will result in a more accurate heading value.

magxmin = -385
magymin = -1312
magzmin = -1435
magxmax = 1276
magymax = 237
magzmax = -301

; General Settings.

Cooling_Temp_High = 35
; This is the temp where we will enable cooling.
Cooling_Temp_Low = 34
; This is the temp where wil will disable cooling.